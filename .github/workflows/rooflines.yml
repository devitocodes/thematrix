name: thematrix-run-rooflines

env:
  OUTPUT_PATH: ${{ github.workspace }}
  RESOURCE_GROUP: thematrix

on:
  push:
    branches:
      - "advisor-single-runner"

jobs:

  set-runners:
    runs-on: ubuntu-latest
    outputs:
      runners-matrix: ${{ steps.set-runners-matrix.outputs.runners-matrix }}
      jobs-matrix: ${{ steps.set-jobs-matrix.outputs.jobs-matrix }}

    steps:

    - name: checkout repo
      uses: actions/checkout@v2.3.2

    - name: Generate runners.json and jobs.json from thematrix.json
      run: |
        # This will populate thematrix/generated
        python3 scripts/make-jobs-runners.py

    - name: Commit any new configurations
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        if [[ `git status --porcelain` ]]; then
            echo ::set-output name=new_configurations::true
            git add results/*
            git commit -m "Add new benchmark configurations"
        else
            echo ::set-output name=new_configurations::false
        fi
      id: new-configs

    - name: Push new configurations
      uses: ad-m/github-push-action@master
      if: ${{ steps.new-configs.outputs.new_configurations }} == true
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: "advisor-single-runner"

    - id: set-runners-matrix
      run: |
        echo "::set-output name=runners-matrix::$(jq -c '.' ${{ env.OUTPUT_PATH }}/generated/runners_public.json)"
  
    - id: set-jobs-matrix
      run: |
        echo "::set-output name=jobs-matrix::$(jq -c '.' ${{ env.OUTPUT_PATH }}/generated/jobs_public.json)"

  # Boot the self-hosted runners and start runner apps
  start-runners:
    needs: set-runners
    runs-on: ubuntu-latest

    strategy:
      # Prevent all build to stop if a single one fails
      fail-fast: false

      matrix: ${{ fromJson(needs.set-runners.outputs.runners-matrix) }}

    steps:

    - name: checkout repo
      uses: actions/checkout@v2.3.2

    - name: start VM
      env:
        SP_APPID: ${{ secrets.SERVICE_PRINCIPAL_APPID }}
        SP_SECRET: ${{ secrets.SERVICE_PRINCIPAL_SECRET }}
        TENANT_ID: ${{ secrets.SERVICE_PRINCIPAL_TENANTID }}
        SUB_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      run: >
        pwsh -command "& '${{ env.OUTPUT_PATH }}\.github\azure\startVM.ps1'"
        -servicePrincipal $SP_APPID
        -servicePrincipalSecret $SP_SECRET
        -servicePrincipalTenantId $TENANT_ID
        -azureSubscriptionName $SUB_ID
        -resourceGroupName $RESOURCE_GROUP
        -vmName ${{ matrix.runner }}

    - name: set host
      run: echo ::set-output name=action_host::$(az vm show -d -g $RESOURCE_GROUP -n ${{ matrix.runner }} --query publicIps -o tsv)
      id: host

    - name: start actions runner app
      uses: fifsky/ssh-action@master
      with:
        command: |
          #!/bin/bash
          nohup actions-runner/run.sh >/dev/null 2>&1 &
        host: ${{ steps.host.outputs.action_host }}
        user: ${{ secrets.ADMIN_LOGIN }}
        pass: ${{ secrets.ADMIN_PASSWORD }}
        args: "-tt"


  rooflines:
    name: ${{ matrix.name }}
    if: ${{ always() }}
    needs: [set-runners, start-runners]
    runs-on: ${{ matrix.tags }}

    strategy:
      matrix: ${{ fromJson(needs.set-runners.outputs.jobs-matrix) }}

    env:

      # Devito setup
      DEVITO_PLATFORM: "${{ matrix.platform }}"
      DEVITO_LANGUAGE: "${{ matrix.language }}"
      DEVITO_MPI: "${{ matrix.mpi }}"

      # OpenMP setup
      OMP_NUM_THREADS: "${{ matrix.num_threads }}"
      OMP_PLACES: "${{ matrix.omp_places }}"
      OMP_PROC_BIND: "${{ matrix.omp_proc_bind }}"

      # MPI setup
      MPI_NUM_PROCS: "${{ matrix.num_procs }}"

    steps:

    - name: Checkout repo
      uses: actions/checkout@v2.3.2

    - name: Install dependencies
      run: |
        pip3 install --upgrade pip
        pip3 install -e .

    - name: Generate rooflines
      run: |
        source /opt/intel/oneapi/advisor/advixe-vars.sh
        source /opt/intel/oneapi/compiler/latest/env/vars.sh intel64
        python3 ${{ github.workspace }}/scripts/generate_rooflines.py

    - name: Collect rooflines
      run: |
        python3 ${{ github.workspace }}/scripts/collect_rooflines.py onlyrunner

    - name: Fetch new roofline jsons
      id: fetch-rooflines
      run: |
        echo ::set-output file-name=results_files::$(git status --porcelain | sed s/^...//)

    - name: Upload rooflines
      uses: actions/upload-artifact@v2
      with:
        name: onlyrunner
        path: |
          ${{ steps.fetch-rooflines.outputs.results_files }}
        if-no-files-found: error


  publish-rooflines:
    needs: rooflines
    runs-on: [self-hosted, testing]

    steps:

    - name: Checkout repo
      uses: actions/checkout@v2.3.2

    - name: Download from other runners
      uses: actions/download-artifact@v2
      with:
        path: results/

    - name: Setup git configurations
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit to repository
      run: |
        git status
        git add results/*
        git status
        git commit -a -m "Push results from runner"

    - name: Push rooflines
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: "advisor-single-runner"

  # Deallocate the runners
  stop-runners:
    name: stop-runners
    if: ${{ always() }}
    needs: [set-runners, rooflines]
    runs-on: ubuntu-latest

    strategy:
      matrix: ${{ fromJson(needs.set-runners.outputs.runners-matrix) }}

    steps:
    - name: checkout repo
      uses: actions/checkout@v2.3.2

    - name: stop VM
      env:
        SP_APPID: ${{ secrets.SERVICE_PRINCIPAL_APPID }}
        SP_SECRET: ${{ secrets.SERVICE_PRINCIPAL_SECRET }}
        TENANT_ID: ${{ secrets.SERVICE_PRINCIPAL_TENANTID }}
        SUB_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      run: >
        pwsh -command "& '${{ env.OUTPUT_PATH }}\.github\azure\stopVM.ps1'"
        -servicePrincipal $SP_APPID
        -servicePrincipalSecret $SP_SECRET
        -servicePrincipalTenantId $TENANT_ID
        -azureSubscriptionName $SUB_ID
        -resourceGroupName $RESOURCE_GROUP
        -vmName ${{ matrix.runner }}
