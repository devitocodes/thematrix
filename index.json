{"project": "thematrix", "tags": {}, "show_commit_url": "http://github.com/devitocodes/thematrix/commit/", "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]], "benchmarks": {"acoustic_iso.IsotropicAcoustic.track_gflopss": {"unit": "gflopss", "name": "acoustic_iso.IsotropicAcoustic.track_gflopss", "version": "0205b18123361e82c0a71f4f9e8456e61c5a71f81c4fc06ed21672d593a45428", "param_names": ["shape", "space_order", "norms"], "params": [["(492, 492, 492)"], ["12"], ["{'rec': 184.5264, 'u': 151.545837}"]], "type": "track", "code": "class IsotropicAcoustic:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-iso', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())", "timeout": 600.0}, "acoustic_tti.TTIAcoustic.track_gflopss": {"unit": "gflopss", "name": "acoustic_tti.TTIAcoustic.track_gflopss", "version": "bd1fdc0a7c9d3da3cb9d92c526c5a17e3b6447b27fc7a5df396aa0aaf74afe54", "param_names": ["shape", "space_order", "norms"], "params": [["(350, 350, 350)"], ["12"], ["{'rec': 66.417102, 'u': 30.707737, 'v': 30.707728}"]], "type": "track", "code": "class TTIAcoustic:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())", "timeout": 600.0}, "acoustic_tti.TTIAcoustic.track_runtime": {"unit": "runtime", "name": "acoustic_tti.TTIAcoustic.track_runtime", "version": "87ff3033029d7c5834674c7e775801c910e998631ea398c96083ac70b212757d", "param_names": ["shape", "space_order", "norms"], "params": [["(350, 350, 350)"], ["12"], ["{'rec': 66.417102, 'u': 30.707737, 'v': 30.707728}"]], "type": "track", "code": "class TTIAcoustic:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())", "timeout": 600.0}, "acoustic_iso.IsotropicAcoustic.track_runtime": {"unit": "runtime", "name": "acoustic_iso.IsotropicAcoustic.track_runtime", "version": "4ea5be8ec152224ba02e5843bf87e0ae7e6d1c25d1df50f9777b7ef54e33d1a7", "param_names": ["shape", "space_order", "norms"], "params": [["(492, 492, 492)"], ["12"], ["{'rec': 184.5264, 'u': 151.545837}"]], "type": "track", "code": "class IsotropicAcoustic:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-iso', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())", "timeout": 600.0}, "acoustic_tti.TTIAcoustic.track_gpointss": {"unit": "gpointss", "name": "acoustic_tti.TTIAcoustic.track_gpointss", "version": "75dd17aaeb011c749b426df2fc75154bea5fbf1d2b7632c23b38ad5ef3d95060", "param_names": ["shape", "space_order", "norms"], "params": [["(350, 350, 350)"], ["12"], ["{'rec': 66.417102, 'u': 30.707737, 'v': 30.707728}"]], "type": "track", "code": "class TTIAcoustic:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())", "timeout": 600.0}, "acoustic_iso.IsotropicAcoustic.track_gpointss": {"unit": "gpointss", "name": "acoustic_iso.IsotropicAcoustic.track_gpointss", "version": "465ec7341216640c331ccce95088049cdbba1fb5f82232d02ca9a0f90f87bbcc", "param_names": ["shape", "space_order", "norms"], "params": [["(492, 492, 492)"], ["12"], ["{'rec': 184.5264, 'u': 151.545837}"]], "type": "track", "code": "class IsotropicAcoustic:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-iso', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())", "timeout": 600.0}}, "graph_param_list": [{"ram": "32920188", "machine": "hero", "python": "3.6", "os": "Linux 4.4.0-134-generic", "arch": "x86_64", "branch": "master", "cpu": "Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz", "num_cpu": "8"}], "hash_length": 8, "machines": {"villain": {"ram": "65840376", "machine": "villain", "os": "Linux 4.4.0-134-generic", "arch": "x86_64", "version": 1, "cpu": "Intel(R) Xeon(R) CPU FAKE", "num_cpu": "32"}, "hero": {"ram": "32920188", "machine": "hero", "os": "Linux 4.4.0-134-generic", "arch": "x86_64", "version": 1, "cpu": "Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz", "num_cpu": "8"}}, "revision_to_date": {"27": 1588153430000, "43": 1588243216000}, "revision_to_hash": {"27": "45d515a2cb2b80b791e9cb62e1d3021db9f2e673", "43": "72f684686363faaaaeba524fac0e9396355fb9cd"}, "params": {"ram": ["32920188", "65840376"], "machine": ["hero", "villain"], "python": ["3.6"], "os": ["Linux 4.4.0-134-generic"], "arch": ["x86_64"], "branch": ["master"], "cpu": ["Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz"], "num_cpu": ["32", "8"]}, "project_url": "http://devitoproject.org/"}