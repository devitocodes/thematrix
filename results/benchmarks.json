{
    "acoustic_iso.IsotropicAcousticAdjoint.track_gflopss": {
        "code": "class IsotropicAcousticAdjoint:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoa', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticAdjoint.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'srca': 646.188904, 'v': 347421.625}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "2c610a66e68000e109d95f18d06152a680f3e398ecb24d8085e22ef8f9896b9c"
    },
    "acoustic_iso.IsotropicAcousticAdjoint.track_gpointss": {
        "code": "class IsotropicAcousticAdjoint:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoa', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticAdjoint.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'srca': 646.188904, 'v': 347421.625}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "2d51f23730168df0187d23e3b5680da3b498f9abb7741f73cc93dae2b285d26c"
    },
    "acoustic_iso.IsotropicAcousticAdjoint.track_runtime": {
        "code": "class IsotropicAcousticAdjoint:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoa', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticAdjoint.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'srca': 646.188904, 'v': 347421.625}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "8268eae86d25abc6b7d3957c69996a593cac8b48ca451164cc07f976f733e840"
    },
    "acoustic_iso.IsotropicAcousticForward.track_gflopss": {
        "code": "class IsotropicAcousticForward:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isof', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticForward.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 109.070557, 'u': 144.055939}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "ff3ea0a42b952334d91cec2ac38c507a62f926f204761bd8ec735cabbaa97394"
    },
    "acoustic_iso.IsotropicAcousticForward.track_gpointss": {
        "code": "class IsotropicAcousticForward:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isof', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticForward.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 109.070557, 'u': 144.055939}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "260917d082a5078b2b41016b52bc4aea2ebe62667cd6958656ce5f8730681bda"
    },
    "acoustic_iso.IsotropicAcousticForward.track_runtime": {
        "code": "class IsotropicAcousticForward:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isof', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticForward.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 109.070557, 'u': 144.055939}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "6d6807cb01e0745af5c121f0d9d641b41d272dc5422a6b3d9cb5d2b03eb65de8"
    },
    "acoustic_iso.IsotropicAcousticJacobian.track_gflopss": {
        "code": "class IsotropicAcousticJacobian:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoJ', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"jacobian\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticJacobian.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(152, 152, 152)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 4.95217, 'u': 144.055573, 'U': 4.879143}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "855de8dbec43e2b8b9264b9011d7579a2df160c5b92095355755a8499e45eef8"
    },
    "acoustic_iso.IsotropicAcousticJacobian.track_gpointss": {
        "code": "class IsotropicAcousticJacobian:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoJ', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"jacobian\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticJacobian.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(152, 152, 152)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 4.95217, 'u': 144.055573, 'U': 4.879143}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "51de79f6948bcaaa368c6e92764c9b2cdf45178dba7c1e10726736f3c5226366"
    },
    "acoustic_iso.IsotropicAcousticJacobian.track_runtime": {
        "code": "class IsotropicAcousticJacobian:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoJ', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"jacobian\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticJacobian.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(152, 152, 152)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 4.95217, 'u': 144.055573, 'U': 4.879143}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "e383970d7b4a39d11d477e841dfd18e2b910c589cd38e37881730cc6b7620d2e"
    },
    "acoustic_iso.IsotropicAcousticJacobianAdjoint.track_gflopss": {
        "code": "class IsotropicAcousticJacobianAdjoint:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoJa', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"jacobian_adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticJacobianAdjoint.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(151, 151, 151)"
            ],
            [
                "12"
            ],
            [
                "{'grad': 2468.533936}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "d3db9fae5a74203502097b0a2f0cc4e1324c5d3307837dceae0e98b419811d89"
    },
    "acoustic_iso.IsotropicAcousticJacobianAdjoint.track_gpointss": {
        "code": "class IsotropicAcousticJacobianAdjoint:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoJa', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"jacobian_adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticJacobianAdjoint.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(151, 151, 151)"
            ],
            [
                "12"
            ],
            [
                "{'grad': 2468.533936}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "34aa1766dfce8ade8f464f4e95bf7d3c53c1aecd8133393233d828a4397a72ad"
    },
    "acoustic_iso.IsotropicAcousticJacobianAdjoint.track_runtime": {
        "code": "class IsotropicAcousticJacobianAdjoint:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-isoJa', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms, op=\"jacobian_adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso.IsotropicAcousticJacobianAdjoint.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(151, 151, 151)"
            ],
            [
                "12"
            ],
            [
                "{'grad': 2468.533936}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "a4eecf25945c9d614f93b31e8adf35ddd952ee320154cf0002a0dd61cf16ea5a"
    },
    "acoustic_iso_ssa.IsotropicSSAForward.track_gflopss": {
        "code": "class IsotropicSSAForward:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-ssa-isof', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic_ssa', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso_ssa.IsotropicSSAForward.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(152, 152, 152)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 247.9561, 'u': 7438246.5}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "e15a83914382ecd62b615313e58dda737f35fc1c34b0550bcd875b05f3190ff3"
    },
    "acoustic_iso_ssa.IsotropicSSAForward.track_gpointss": {
        "code": "class IsotropicSSAForward:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-ssa-isof', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic_ssa', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso_ssa.IsotropicSSAForward.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(152, 152, 152)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 247.9561, 'u': 7438246.5}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "ef8e7e49b2d3ee74b1e7b2872dca34258c714a8611c145564a33863eccfddec5"
    },
    "acoustic_iso_ssa.IsotropicSSAForward.track_runtime": {
        "code": "class IsotropicSSAForward:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-ssa-isof', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic_ssa', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_iso_ssa.IsotropicSSAForward.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(152, 152, 152)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 247.9561, 'u': 7438246.5}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "9de798790985d6ca2c4af626d7513016337da9a34c33208528bc84fa7e91e1bb"
    },
    "acoustic_tti.TTIAcousticAdjoint.track_gflopss": {
        "code": "class TTIAcousticAdjoint:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-ttia', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms, op=\"adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_tti.TTIAcousticAdjoint.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'srca': 1588.117065, 'p': 568135.6875, 'r': 620591.5}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "ad0345d495e9edcb9a2f875431408bb70932683acd94bfa1626ec03fc6a24bf4"
    },
    "acoustic_tti.TTIAcousticAdjoint.track_gpointss": {
        "code": "class TTIAcousticAdjoint:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-ttia', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms, op=\"adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_tti.TTIAcousticAdjoint.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'srca': 1588.117065, 'p': 568135.6875, 'r': 620591.5}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "207d169c117bed56426621e070f6d38b14280ff3565485a2aeb88d81eb7e855e"
    },
    "acoustic_tti.TTIAcousticAdjoint.track_runtime": {
        "code": "class TTIAcousticAdjoint:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-ttia', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms, op=\"adjoint\")\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_tti.TTIAcousticAdjoint.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'srca': 1588.117065, 'p': 568135.6875, 'r': 620591.5}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "50ac683539c752378824a7e439fa94db1a6953ba35258eb5db4b201094b9c828"
    },
    "acoustic_tti.TTIAcousticForward.track_gflopss": {
        "code": "class TTIAcousticForward:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_tti.TTIAcousticForward.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 17.805016, 'u': 29.331156, 'v': 29.331171}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "2c5d670a0ea4cadfa2dc0aa6e42758c95d44ed78bca8978bbb94f3c5cd651ba7"
    },
    "acoustic_tti.TTIAcousticForward.track_gpointss": {
        "code": "class TTIAcousticForward:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_tti.TTIAcousticForward.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 17.805016, 'u': 29.331156, 'v': 29.331171}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "7bdec4892e619539356dfb48c40c70580d5fa4127a4d3fd85f2d7c97e4a0be6d"
    },
    "acoustic_tti.TTIAcousticForward.track_runtime": {
        "code": "class TTIAcousticForward:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "acoustic_tti.TTIAcousticForward.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 17.805016, 'u': 29.331156, 'v': 29.331171}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "b468018683ada67ea15449a1567af9340442403a9e006ab06f589ce70f930d2c"
    },
    "elastic.Elastic.track_gflopss": {
        "code": "class Elastic:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('elastic', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('elastic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "elastic.Elastic.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(100, 100, 100)"
            ],
            [
                "12"
            ],
            [
                "{'rec1': 2.814472, 'rec2': 0.119794}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "32bad2db806c7f2ddc1f1e03667d1c4529bb174d1213bb49f2520b48c86b95d2"
    },
    "elastic.Elastic.track_gpointss": {
        "code": "class Elastic:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('elastic', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('elastic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "elastic.Elastic.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(100, 100, 100)"
            ],
            [
                "12"
            ],
            [
                "{'rec1': 2.814472, 'rec2': 0.119794}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "abc075e4313d8530763d84aeb417ae7a1429e8515c0e353464bf1bbe0abdf5c4"
    },
    "elastic.Elastic.track_runtime": {
        "code": "class Elastic:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('elastic', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('elastic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "elastic.Elastic.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(100, 100, 100)"
            ],
            [
                "12"
            ],
            [
                "{'rec1': 2.814472, 'rec2': 0.119794}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "65971090de7c0690088a612ef9283750a43632b086e93b8a1c138f6c0bb2cdfe"
    },
    "version": 2,
    "viscoelastic.Viscoelastic.track_gflopss": {
        "code": "class Viscoelastic:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('viscoelastic', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('viscoelastic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "viscoelastic.Viscoelastic.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(100, 100, 100)"
            ],
            [
                "12"
            ],
            [
                "{'rec1': 3.314084, 'rec2': 0.049992}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gflopss",
        "version": "b26cc7af404fac11063cbfba56b0c6b101ba832f0d9fc56647f687d607da5dba"
    },
    "viscoelastic.Viscoelastic.track_gpointss": {
        "code": "class Viscoelastic:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('viscoelastic', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('viscoelastic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "viscoelastic.Viscoelastic.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(100, 100, 100)"
            ],
            [
                "12"
            ],
            [
                "{'rec1': 3.314084, 'rec2': 0.049992}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "gpointss",
        "version": "802ec0afbeb1a6f751f303d55103d31452fd36275447e529baeb6e31f5383d7b"
    },
    "viscoelastic.Viscoelastic.track_runtime": {
        "code": "class Viscoelastic:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = run_prepare('viscoelastic', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('viscoelastic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())",
        "name": "viscoelastic.Viscoelastic.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(100, 100, 100)"
            ],
            [
                "12"
            ],
            [
                "{'rec1': 3.314084, 'rec2': 0.049992}"
            ]
        ],
        "timeout": 900.0,
        "type": "track",
        "unit": "runtime",
        "version": "7d9915b53fccb4fc1a181a1830849e3d9d2125cc7f4a594d9bda84b1391840ee"
    }
}