{
    "acoustic_iso.IsotropicAcoustic.track_gflopss": {
        "code": "class IsotropicAcoustic:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-iso', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)",
        "name": "acoustic_iso.IsotropicAcoustic.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 184.5264, 'u': 151.545837}"
            ]
        ],
        "timeout": 600.0,
        "type": "track",
        "unit": "gflopss",
        "version": "474e2fa4e794ee63777cebe154a62843e19021d98e1cce3736a1effc3cdbca66"
    },
    "acoustic_iso.IsotropicAcoustic.track_gpointss": {
        "code": "class IsotropicAcoustic:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-iso', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)",
        "name": "acoustic_iso.IsotropicAcoustic.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 184.5264, 'u': 151.545837}"
            ]
        ],
        "timeout": 600.0,
        "type": "track",
        "unit": "gpointss",
        "version": "7177a839327ccf7e1b6207e8f1efbbb9391795396b176bd90e3db0f23890b5cc"
    },
    "acoustic_iso.IsotropicAcoustic.track_runtime": {
        "code": "class IsotropicAcoustic:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-iso', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('acoustic', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)",
        "name": "acoustic_iso.IsotropicAcoustic.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(492, 492, 492)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 184.5264, 'u': 151.545837}"
            ]
        ],
        "timeout": 600.0,
        "type": "track",
        "unit": "runtime",
        "version": "538f96fbc194ef4de844408fd31589490ca9325db90a8239300dc3313e8cea0a"
    },
    "acoustic_tti.TTIAcoustic.track_gflopss": {
        "code": "class TTIAcoustic:\n    def track_gflopss(self, shape, space_order, norms):\n        return self.summary.gflopss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)",
        "name": "acoustic_tti.TTIAcoustic.track_gflopss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 66.417102, 'u': 30.707737, 'v': 30.707728}"
            ]
        ],
        "timeout": 600.0,
        "type": "track",
        "unit": "gflopss",
        "version": "3fda22c571d67da42dfa842da1fd13fda77de1ea16ff1df429336b178fca9aa2"
    },
    "acoustic_tti.TTIAcoustic.track_gpointss": {
        "code": "class TTIAcoustic:\n    def track_gpointss(self, shape, space_order, norms):\n        return self.summary.gpointss\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)",
        "name": "acoustic_tti.TTIAcoustic.track_gpointss",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 66.417102, 'u': 30.707737, 'v': 30.707728}"
            ]
        ],
        "timeout": 600.0,
        "type": "track",
        "unit": "gpointss",
        "version": "c0eb453d38fa97fb768a6ad84a5ca8ad6f125998e7b5783313b9fa66192b4db1"
    },
    "acoustic_tti.TTIAcoustic.track_runtime": {
        "code": "class TTIAcoustic:\n    def track_runtime(self, shape, space_order, norms):\n        return self.summary.time\n\n    def setup(self, shape, space_order, norms):\n        fn_perf, fn_norms = make_unique_filename('acoustic-tti', shape, space_order)\n        try:\n            with open(fn_perf, 'r') as f:\n                self.summary = eval(f.read())\n        except FileNotFoundError:\n            run_benchmark('tti', shape, space_order, self.tn, fn_perf, fn_norms)\n            check_norms(fn_norms, norms)",
        "name": "acoustic_tti.TTIAcoustic.track_runtime",
        "param_names": [
            "shape",
            "space_order",
            "norms"
        ],
        "params": [
            [
                "(350, 350, 350)"
            ],
            [
                "12"
            ],
            [
                "{'rec': 66.417102, 'u': 30.707737, 'v': 30.707728}"
            ]
        ],
        "timeout": 600.0,
        "type": "track",
        "unit": "runtime",
        "version": "aaf6bce9cff6a0e8a7b7303da23dcc26f8258773af330cadb996ddea200b3d90"
    },
    "version": 2
}